
(defun I (i)
  i)

(defun lazy (arg)
  (lambda(fn)
	(funcall fn arg)))

;; (a) cons
(defun ocons (itemfor listfor)
  (lambda (fn)
    (funcall fn itemfor (lazy listfor))))

(defun ocar (ohcons)
  (funcall ohcons (lambda(fr sq)
		    (funcall sq 'I))))


(defun ocdr (ohcons)
  (funcall ohcons (lambda(fr sq)
		    fr)))

(defun typenow (typed somethingtotype)
  (ocons typed somethingtotype))

(defun typelistfor (typecheck)
  (lambda (tocheck)
    (if (eq (ocdr tocheck) typecheck)
	t
	nil)))

(defun getypen (some)
  (ocar some))

(setq typelistp (typelistfor 'list))

(defun ourcons (somea someb)
  (typenow 'list (ocons somea someb)))

(defun onullp (item)
  (if (eq (ocdr item) 'nol)
      t
      nil))

(defun nocar (item)
  (ocar (getypen item)))

(defun nocdr (item)
  (ocdr (getypen item)))
    

; needs a flag for data structure handler: a type
;; (d) member
(defun omember (lsts item)
  (and (funcall typelistp item)
       (and (not (onullp (getypen item))
	    (or (eql (nocdr lsts) item)
		(omember (nocar lsts) item))))))
